<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>设计模式 - 分类 - 新手笔记</title>
        <link>https://xue.woyao.net/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
        <description>设计模式 - 分类 - 新手笔记</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 20 Apr 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://xue.woyao.net/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>设计模式接口</title>
    <link>https://xue.woyao.net/posts/designpatterns/interface/</link>
    <pubDate>Thu, 20 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>沙里</author>
    <guid>https://xue.woyao.net/posts/designpatterns/interface/</guid>
    <description><![CDATA[chatgpt 的回答： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 Java中有很多设计模式]]></description>
</item>
<item>
    <title>认识设计模式</title>
    <link>https://xue.woyao.net/posts/designpatterns/readme/</link>
    <pubDate>Sat, 08 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>沙里</author>
    <guid>https://xue.woyao.net/posts/designpatterns/readme/</guid>
    <description><![CDATA[设计模式的接口和抽象类 如果一个人长时间不使用 23 种设计模式，那么他很容易遗忘设计模式的规则和用法。但是如果我们有一种工具，能够帮助我们拾起设计]]></description>
</item>
<item>
    <title>《实现领域驱动设计》读书笔记</title>
    <link>https://xue.woyao.net/posts/designpatterns/shixianlingyuqudongsheji/</link>
    <pubDate>Wed, 05 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>沙里</author>
    <guid>https://xue.woyao.net/posts/designpatterns/shixianlingyuqudongsheji/</guid>
    <description><![CDATA[命名 对一个领域建模时，要仔细考虑什么样的对象做什么样的事情，这是对象行为的设计。对对象的命名能够传达准确的业务含义，即反映通用语言。 如果我们]]></description>
</item>
<item>
    <title>四十二章经</title>
    <link>https://xue.woyao.net/posts/designpatterns/sishierzhangjing/</link>
    <pubDate>Tue, 07 Feb 2023 00:00:00 &#43;0000</pubDate>
    <author>沙里</author>
    <guid>https://xue.woyao.net/posts/designpatterns/sishierzhangjing/</guid>
    <description><![CDATA[编码 数据库 建表 类型字段表，推荐使用名字枚举，而不是使用整型，虽然整型效率高，但是真的不适合观看和记忆 接口对接 日志 跟三方或二方接口交互时，一定]]></description>
</item>
<item>
    <title>钩子插件标签</title>
    <link>https://xue.woyao.net/posts/designpatterns/%E9%92%A9%E5%AD%90%E5%AE%9E%E7%8E%B0%E5%BE%AE%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84/</link>
    <pubDate>Sat, 01 Oct 2022 00:00:00 &#43;0000</pubDate>
    <author>沙里</author>
    <guid>https://xue.woyao.net/posts/designpatterns/%E9%92%A9%E5%AD%90%E5%AE%9E%E7%8E%B0%E5%BE%AE%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84/</guid>
    <description><![CDATA[微内核架构 微内核架构(Microkernel Architecture)，也称为插件化架构（Plug-in Architecture）。核心系统]]></description>
</item>
<item>
    <title>前言</title>
    <link>https://xue.woyao.net/posts/designpatterns/%E5%89%8D%E8%A8%80/</link>
    <pubDate>Tue, 23 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>沙里</author>
    <guid>https://xue.woyao.net/posts/designpatterns/%E5%89%8D%E8%A8%80/</guid>
    <description><![CDATA[聊聊设计模式 分类 模式 创建型 简单工厂，工厂方法，抽象工厂 建造者，原型 结构型 适配器，装饰者，代理，外观，享元 行为型 策略 特点 单例singleton]]></description>
</item>
<item>
    <title>测试驱动学习</title>
    <link>https://xue.woyao.net/posts/designpatterns/tdl/</link>
    <pubDate>Tue, 23 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>沙里</author>
    <guid>https://xue.woyao.net/posts/designpatterns/tdl/</guid>
    <description><![CDATA[Test Driver Learn，测试驱动学习。]]></description>
</item>
<item>
    <title>装饰者模式</title>
    <link>https://xue.woyao.net/posts/designpatterns/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Tue, 23 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>沙里</author>
    <guid>https://xue.woyao.net/posts/designpatterns/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[前言 特点就是：一个接口，若干实现类，且每一个类的构造方法参数就是这个接口。他们互相构造，互相叠加。 代码展示 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17]]></description>
</item>
<item>
    <title>几种工厂模式</title>
    <link>https://xue.woyao.net/posts/designpatterns/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 22 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>沙里</author>
    <guid>https://xue.woyao.net/posts/designpatterns/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[简单工厂 工厂方法 抽象工厂 建造者 原型]]></description>
</item>
<item>
    <title>模板模式</title>
    <link>https://xue.woyao.net/posts/designpatterns/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 22 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>沙里</author>
    <guid>https://xue.woyao.net/posts/designpatterns/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[父类设计一个算法需要哪几步，子类则实现这些步骤。 大咖秀 javax.servlet.http.HttpServlet 抽象类 javax.servlet.http.HttpServlet 在其方法service()定义了处理 get 请求，post 请求。而我们只需要继承 HttpServlet]]></description>
</item>
</channel>
</rss>
